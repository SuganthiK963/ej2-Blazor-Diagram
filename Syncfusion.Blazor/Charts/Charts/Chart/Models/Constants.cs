using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace Syncfusion.Blazor.Charts
{
    public static class Constants
    {
        internal const string GETCHARCOLLECTIONSIZE = "sfBlazor.getCharCollectionSize";
        internal const string INITAILELEMENTBOUNDSBYID = "sfBlazor.getElementBoundsById";
        internal const string TRANSPARENT = "transparent";
        internal const string PRIMARYXAXIS = "PrimaryXAxis";
        internal const string PRIMARYYAXIS = "PrimaryYAxis";
        internal const int AXISPADDING = 10;
        internal const string LEGENDRENDER = "OnLegendItemRender";
        internal const string RESIZED = "SizeChanged";
        internal const string TOOLTIPRENDER = "TooltipRender";
        internal const string LEGENDCLICK = "OnLegendClick";
        internal const string POINTRENDER = "OnPointRender";
        internal const string TEXTRENDER = "OnDataLabelRender";
        internal const string SHAREDTOOLTIPRENDER = "SharedTooltipRender";
        internal const string AXISMULTILABELRENDER = "OnAxisMultiLevelLabelRender";
        internal const string ONPOINTCLICK = "OnPointClick";
        internal const string MULTILEVELLABELCLICK = "OnMultiLevelLabelClick";
        internal const string ONZOOMING = "OnZooming";
        internal const string AXISLABELRENDER = "OnAxisLabelRender";
        internal const string AXISRANGECALCULATED = "OnAxisActualRangeCalculated";
        internal const string ONSCROLLCHANGED = "OnScrollChanged";
        internal const string ONSCROLLSTART = "OnScrollStart";
        internal const string ONSCROLLEND = "OnScrollEnd";
        internal const string ONZOOMSTART = "OnZoomStart";
        internal const string ONZOOMEND = "OnZoomEnd";
        internal const string ONEXPORTCOMPLETED = "OnExportCompleted";
        internal const string ONAXISLABELCLICK = "OnAxisLabelClick";
        internal const string ONDATAEDITCOMPLETED = "OnDataEditCompleted";
        internal const string ONDATAEDIT = "OnDataEdit";
        internal const string LOADED = "Loaded";
        internal const string CANVAS = "_canvas";
        internal const string SVG = "_svg";
        internal const string SERIESCLIPRECTID = "_ChartSeriesClipRect_";
        internal const string BORDERID = "_ChartBorder";
        internal const string AREABORDERID = "_ChartAreaBorder";
        internal const string USERINTERACTION = "_UserInteraction";
        internal const string STOCKCHART_ID = "_stockChart_chart";
        internal const string EJ2_CHART_ZOOMTIP = "EJ2_Chart_ZoomTip";
        internal const string CHARTINTROP = "sfBlazor.Chart.";
        internal const string INITIALIZE = CHARTINTROP + "initialize";
        internal const string GETELEMENTBOUNDSBYID = CHARTINTROP + "getElementBoundsById";
        internal const string GETPARENTELEMENTBOUNDSBYID = CHARTINTROP + "getParentElementBoundsById";
        internal const string GETCHARSIZEBYFONT = CHARTINTROP + "getCharSizeByFontKeys";
        internal const string DRAWTRACKBALL = CHARTINTROP + "drawTrackBall";
        internal const string REMOVEHIGHLIGHTEDMARKER = CHARTINTROP + "removeHighLightedMarker";
        internal const string WIREEVENTS = CHARTINTROP + "wireEvents";
        internal const string RENDERTOOLTIP = CHARTINTROP + "renderTooltip";
        internal const string TOOLTIPFADEOUT = CHARTINTROP + "fadeOut";
        internal const string SETATTRIBUTE = CHARTINTROP + "setAttribute";
        internal const string SETZOOMINGELEMENTATTRIBUTES = CHARTINTROP + "setZoomingElementAttributes";
        internal const string SETZOOMINGCIPPATH = CHARTINTROP + "setZoomingCipPath";
        internal const string CREATETOOLTIP = CHARTINTROP + "createTooltip";
        internal const string REMOVEELEMENT = CHARTINTROP + "removeElement";
        internal const string APPLYSELECTION = CHARTINTROP + "applySelection";
        internal const string DOERRORBARANIMATION = CHARTINTROP + "doErrorBarAnimation";
        internal const string GETBROWSERDEVICEINFO = CHARTINTROP + "getBrowserDeviceInfo";
        internal const string SCROLLMOUSEDOWN = CHARTINTROP + "scrollMouseDown(event)";
        internal const string SCROLLMOUSEMOVE = CHARTINTROP + "scrollMouseMove(event)";
        internal const string SCROLLMOUSEUP = CHARTINTROP + "scrollMouseUp(event)";
        internal const string SCROLLMOUSEWHEEL = CHARTINTROP + "scrollMouseWheel(event)";
        internal const string ISLASSOID = CHARTINTROP + "isLassoId";
        internal const string GETTEMPLATESIZE = CHARTINTROP + "getTemplateSize";
        internal const string UNWIREEVENTS = CHARTINTROP + "unWireEvents";
        internal const string DESTROY = CHARTINTROP + "destroy";
        internal const string SUBPATTERN = @"~\d+~";
        internal const string SUPPATTERN = @"\^\d+\^";
        internal const string NUMPATTERN = @"[^0-9\.]+";
        internal const string ONMOUSEDOWN = "onmousedown";
        internal const string ONTOUCHSTART = "ontouchstart";
        internal const string ONMOUSEOVER = "onmouseover";
        internal const string ONMOUSEOUT = "onmouseout";
        internal const string ONPOINTEROUT = "onpointerout";
        internal const string ONMOUSEMOVE = "onmousemove";
        internal const string ONPOINTERMOVE = "onpointermove";
        internal const string ONTOUCHMOVE = "ontouchmove";
        internal const string ONTOUCHEND = "ontouchend";
        internal const string ONMOUSEWHEEL = "onmousewheel";
        internal const string ONWHEEL = "onwheel";
        internal const string ONMOUSEUP = "onmouseup";
        internal const string LEFTCIRCLE = "_leftCircle_";
        internal const string RIGHTCIRCLE = "_rightCircle_";
        internal const string LEFTARROW = "_leftArrow_";
        internal const string RIGHTARROW = "_rightArrow_";
        internal const string SCROLLBARTHUMB = "scrollBarThumb_";
        internal const string SCROLLBARBACKRECT = "scrollBarBackRect_";
        internal const string CURSOR = "cursor";
        internal const string MOZILLA = "mozilla";
        internal const string MSIE = "msie";
        internal const string RIGHTMOVE = "RightMove";
        internal const string LEFTMOVE = "LeftMove";
        internal const string GRIPCIRCLE = "_gripCircle";
        internal const string ARROW = "Arrow_";
        internal const string CIRCLE = "Circle_";
        internal const string NS_RESIZE = "ns-resize";
        internal const string EW_RESIZE = "ew-resize";
        internal const string AUTO = "auto";
        internal const string ZOOMID = "_Zooming_";
        internal const string UNDERSCORE = "_";
        internal const string DOANIMATION = CHARTINTROP + "doInitialAnimation";
        internal const string DOREDRAWANIMATION = CHARTINTROP + "doDynamicAnimation";
        internal const string ONSELECTIONCHANGED = "OnSelectionChanged";
        internal const string GETDATALABELTEMPLATEBOUNDSBYID = CHARTINTROP + "getDatalabelTemplateSize";
        internal const string JOBJECT = "JObject";
        internal const string EXPANDOOBJECT = "ExpandoObject";
        internal const string DYNAMICOBJECT = "DynamicObject";
        internal const string MAJORGRIDLINE = "MajorGridLines";
        internal const string MAJORTICKLINE = "MajorTickLine";
        internal const string MINORGRIDLINE = "MinorGridLine";
        internal const string MINORTICKLINE = "MinorTickLine";
        internal const string GETCHARSIZEBYFONTKEYS = "sfBlazor.getCharSizeByFontKeys";
        internal const string CHARTINTROP_GETCHARSIZEBYFONTKEYS = CHARTINTROP + "getCharSizeByFontKeys";
        internal static Regex REGSUB = new Regex(SUBPATTERN);
        internal static Regex REGSUP = new Regex(SUPPATTERN);
        internal static Regex REGNUM = new Regex(NUMPATTERN);
        internal const string SETSVGDIMENSION = CHARTINTROP + "setSvgDimensions";
        internal const string INITIALSETSVGDIMENSION = "sfBlazor.setSvgDimensions";
        internal const string CHARTINTROP_GETCHARCOLLECTIONSIZE = CHARTINTROP + "getCharCollectionSize";
        internal const string RTL = "rtl";
    }
}
