@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Internal;
@using Syncfusion.Blazor.Calendars.Internal;
@namespace Syncfusion.Blazor.Calendars
@typeparam TValue
@inherits CalendarBase<TValue>
<SyncfusionLicense></SyncfusionLicense>
<ResourceManager></ResourceManager>
<CascadingValue Value="this">
    @if (this.FloatLabelType == FloatLabelType.Auto || this.FloatLabelType == FloatLabelType.Always)
    {
        <div @ref="@ContainerElement" class="@ContainerClass?.Trim()" @attributes="ContainerAttr">
            <input @ref="@InputElement" id="@ID" @attributes="inputAttr" value="@(CurrentValueAsString)" @onchange="@OnChangeHandler" @onfocus="@OnFocusHandler" @onpaste="@OnPasteHandler" @oninput="@OnInputHandler" />
            <span class="e-float-line"></span>
            <label class="@FloatLabel?.Trim()" id="label_@(ID)" for="@(ID)">@this.Placeholder</label>
            @if (this.ShowClearButton)
            {
                <span @ref="ClearElement" class="@(ClearIconClass)" aria-label="close" role="button" @onclick="@WireClearBtnEvents" @onmousedown="@InvokeClearBtnEvent" @ontouchstart="@InvokeClearBtnEvent" @onmousedown:preventDefault="@ClickStopPropagation" @ontouchstart:preventDefault="@ClickStopPropagation"></span>
            }
            <span class="@(GROUP_ICON + SPACE + DateIcon)" @onmousedown="@((args) => MouseIconHandler(args, DATE_ICON))" @onmousedown:preventDefault=@(!IsDevice) ></span>
        </div>
    }
    else
    {
        <span @ref="@ContainerElement" class="@ContainerClass?.Trim()" @attributes="ContainerAttr" >
            <input @ref="@InputElement" id="@ID" @attributes="inputAttr" value="@(CurrentValueAsString)" @onchange="@OnChangeHandler" @onfocus="@OnFocusHandler" @onpaste="@OnPasteHandler" @oninput="@OnInputHandler" />
            @if (this.ShowClearButton)
            {
                <span @ref="ClearElement" class="@(ClearIconClass)" aria-label="close" role="button" @onclick="@WireClearBtnEvents" @onmousedown="@InvokeClearBtnEvent" @ontouchstart="@InvokeClearBtnEvent" @onmousedown:preventDefault="@ClickStopPropagation" @ontouchstart:preventDefault="@ClickStopPropagation"></span>
            }
            <span class="@(GROUP_ICON + SPACE + DateIcon)" @onmousedown="@((args) => MouseIconHandler(args, DATE_ICON))" @onmousedown:preventDefault=@(!IsDevice) ></span>
        </span>
    }
    @ChildContent
</CascadingValue>
@if (this.ShowPopupCalendar)
{
    <CascadingValue Value="@this">
        <div @ref="@PopupHolderEle" class="@POPUP_HOLDER" style="top:-9999px; left:-9999px; position: absolute; visibility:hidden; width:0px; height:0px;">
            <div @ref="@PopupElement" class="@RootClass @PopupContainer @POPUP" id="@(ID)_popup">
                <div class="@CalendarClass">
                    @if (this.IsDevice)
                    {
                        <div class="@MODEL_HEADER">
                            <h1 class="@MODEL_YEAR">@this.ModelYear</h1>
                            <div>
                                <span class="@MODEL_DAY">@this.ModelDay </span>
                                <span class="@MODEL_MONTH">@this.ModelMonth</span>
                            </div>
                        </div>
                    }
                    <CascadingValue Value="@this" Name="ParentComponent">
                        <CalendarBaseRender @ref="CalendarBaseInstance" TValue="TValue" MultiSelection="false"></CalendarBaseRender>
                    </CascadingValue>
                </div>
            </div>
        </div>
    </CascadingValue>
}
